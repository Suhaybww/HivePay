### **High-Level Workflow**

#### **Goal:**
A system to collect contributions from users using BECS Direct Debit, hold funds temporarily without your platform directly accessing them, and make payouts to the next user in the rotation while handling edge cases like payment failures or timeouts.

---

### **High-Level Process:**

1. **User Registration and Setup:**
   - Users register on your platform.
   - Users subscribe to your app via **Stripe Customer** accounts.
   - During onboarding:
     - Users set up BECS Direct Debit (creating a `PaymentMethod` linked to their Stripe Customer).
     - Users create a **Stripe Connect Express account** to receive payouts.

2. **Contribution Collection:**
   - At the start of each contribution cycle:
     - Initiate **PaymentIntents** for all group members using their Stripe `customer_id` and saved BECS `PaymentMethod`.
   - Monitor the status of these PaymentIntents using webhooks (`payment_intent.succeeded` or `payment_intent.payment_failed`).

3. **Hold Funds Temporarily:**
   - Funds are held in Stripe's processing pipeline during the settlement period (3-5 business days for BECS Direct Debit).
   - Payments that succeed are flagged; payments that fail trigger retries or group resolution logic.

4. **Payout Execution:**
   - Once all contributions succeed:
     - Payout the total contribution amount to the next user in line using their **Stripe Connect Express account ID**.
   - If contributions do not succeed within a set timeframe (e.g., 2-3 days):
     - Refund all contributors and cancel the round.

5. **Edge Case Handling:**
   - **Payment Failures:**
     - Retry failed payments automatically up to a set limit.
     - Notify users of failures with a deadline for resolution.
   - **Timeouts:**
     - If payments are not resolved within the timeout period, refund successful contributors and abort the payout.
   - **Payout Failures:**
     - Handle payouts failing due to invalid accounts by notifying the recipient and pausing the process.

6. **Compliance and Security:**
   - Ensure funds are never settled in your platform’s balance by leveraging Stripe’s `on_behalf_of` and `Transfer Groups` features.
   - Use Stripe's built-in fraud and compliance tools to verify users and transactions.

---

### **Low-Level Implementation**

#### **System Design**

1. **Database Schema:**
   - Store `customer_id` (Stripe Customer ID) for BECS Direct Debit.
   - Store `account_id` (Stripe Connect Express Account ID) for payouts.
   - Track group cycles, contributions, and payout statuses.

   ```prisma
   model User {
     id                String   @id @default(cuid())
     customerId        String   @unique
     accountId         String   @unique
     groupMemberships  GroupMembership[]
   }

   model GroupMembership {
     id                String   @id @default(cuid())
     groupId           String
     userId            String
     paymentStatus     String   // Pending, Succeeded, Failed
     payoutStatus      String   // Pending, Completed
   }
   ```

---

#### **Payment Flow Logic**

1. **Contribution Collection:**
   - Create a **PaymentIntent** for each user in the group.
   - Example code:
     ```javascript
     const paymentIntent = await stripe.paymentIntents.create({
       amount: contributionAmount,
       currency: 'aud',
       payment_method: paymentMethodId,
       customer: customerId,
       confirm: true,
       metadata: {
         groupId: groupId,
         cycleId: cycleId,
       },
     });
     ```

2. **Webhook Handling:**
   - Monitor PaymentIntent statuses:
     ```javascript
     app.post('/webhook', (req, res) => {
       const event = req.body;

       switch (event.type) {
         case 'payment_intent.succeeded':
           // Mark payment as successful
           break;
         case 'payment_intent.payment_failed':
           // Retry or notify user
           break;
       }

       res.status(200).end();
     });
     ```

3. **Hold Funds Without Settlement:**
   - Use Stripe's `on_behalf_of` parameter to direct funds to a temporary **holding connected account**.
   - Example:
     ```javascript
     const paymentIntent = await stripe.paymentIntents.create({
       amount: contributionAmount,
       currency: 'aud',
       payment_method: paymentMethodId,
       customer: customerId,
       confirm: true,
       on_behalf_of: holdingAccountId,
     });
     ```

4. **Payout Execution:**
   - Once all payments succeed, transfer funds to the next user:
     ```javascript
     const transfer = await stripe.transfers.create({
       amount: totalAmount,
       currency: 'aud',
       destination: recipientAccountId,
       source_transaction: chargeId, // Use the original payment's charge
     });
     ```

5. **Refund Handling:**
   - Refund contributors if the round fails:
     ```javascript
     const refund = await stripe.refunds.create({
       payment_intent: paymentIntentId,
     });
     ```

---

#### **Edge Case Handling**

1. **Payment Failures:**
   - Retry logic:
     ```javascript
     const retries = 3;
     let attempt = 0;
     while (attempt < retries) {
       try {
         await stripe.paymentIntents.confirm(paymentIntentId);
         break;
       } catch (error) {
         attempt++;
       }
     }
     if (attempt === retries) {
       // Notify user and mark as failed
     }
     ```

2. **Timeouts:**
   - Define a timeout period (e.g., 48 hours).
   - Use scheduled jobs to check for unresolved payments and issue refunds:
     ```javascript
     if (Date.now() - paymentCreatedAt > timeoutPeriod) {
       // Refund contributors and cancel round
     }
     ```

3. **Payout Failures:**
   - Handle invalid account IDs gracefully:
     ```javascript
     try {
       await stripe.transfers.create({...});
     } catch (error) {
       // Notify user and retry payout
     }
     ```

---

### **Design Choices**

1. **Use of Stripe Connect:**
   - Ensures that funds are securely held and transferred directly between users without your platform accessing them.

2. **Temporary Holding Accounts:**
   - Adds a layer of compliance and separates platform funds from group funds.

3. **Retries and Notifications:**
   - Built-in retry mechanisms for failed payments.
   - Notifications to users for payment issues and next steps.

4. **Refund Mechanism:**
   - Ensures user trust by automatically refunding contributors in case of group failure.

---
