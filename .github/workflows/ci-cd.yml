name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
      - 'feature/**'

env:
  KINDE_CLIENT_ID: ${{ secrets.KINDE_CLIENT_ID }}
  KINDE_CLIENT_SECRET: ${{ secrets.KINDE_CLIENT_SECRET }}
  KINDE_ISSUER_URL: ${{ secrets.KINDE_ISSUER_URL }}
  KINDE_SITE_URL: ${{ secrets.KINDE_SITE_URL }}
  KINDE_POST_LOGOUT_REDIRECT_URL: ${{ secrets.KINDE_POST_LOGOUT_REDIRECT_URL }}
  KINDE_POST_LOGIN_REDIRECT_URL: ${{ secrets.KINDE_POST_LOGIN_REDIRECT_URL }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
  NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
  NEXT_PUBLIC_PUSHER_KEY: ${{ secrets.NEXT_PUBLIC_PUSHER_KEY }}
  NEXT_PUBLIC_PUSHER_CLUSTER: ${{ secrets.NEXT_PUBLIC_PUSHER_CLUSTER }}
  PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
  PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Create .env file
        run: |
          cat << EOF > .env
          KINDE_CLIENT_ID=${{ secrets.KINDE_CLIENT_ID }}
          KINDE_CLIENT_SECRET=${{ secrets.KINDE_CLIENT_SECRET }}
          KINDE_ISSUER_URL=${{ secrets.KINDE_ISSUER_URL }}
          KINDE_SITE_URL=${{ secrets.KINDE_SITE_URL }}
          KINDE_POST_LOGOUT_REDIRECT_URL=${{ secrets.KINDE_POST_LOGOUT_REDIRECT_URL }}
          KINDE_POST_LOGIN_REDIRECT_URL=${{ secrets.KINDE_POST_LOGIN_REDIRECT_URL }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_PUSHER_KEY=${{ secrets.NEXT_PUBLIC_PUSHER_KEY }}
          NEXT_PUBLIC_PUSHER_CLUSTER=${{ secrets.NEXT_PUBLIC_PUSHER_CLUSTER }}
          PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}
          PUSHER_SECRET=${{ secrets.PUSHER_SECRET }}
          EOF

      - name: Verify critical environment variables
        shell: bash
        env:
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          KINDE_CLIENT_ID: ${{ secrets.KINDE_CLIENT_ID }}
        run: |
          function check_var() {
            local var_name="$1"
            local var_value="${!var_name}"
            if [ -z "$var_value" ]; then
              echo "::error::$var_name is not set or empty"
              return 1
            fi
            echo "$var_name is properly set"
            return 0
          }
          
          failed=0
          check_var "STRIPE_SECRET_KEY" || failed=1
          check_var "DATABASE_URL" || failed=1
          check_var "KINDE_CLIENT_ID" || failed=1
          
          if [ "$failed" -eq 1 ]; then
            echo "::error::One or more required environment variables are missing"
            exit 1
          fi
          
          echo "All critical environment variables are verified!"

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Build the app
        run: npm run build
        env:
          NODE_ENV: production
          CI: true

      - name: Analyze bundle
        run: npm run analyze
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nextjs-build
          path: .next
        if: success()

      - name: Upload analysis artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: .next/analyze

  notify-failure:
    runs-on: ubuntu-latest
    needs: build-and-analyze
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "The pipeline has failed. Please check the logs and artifacts."
          echo "Make sure all required environment variables are set in GitHub Secrets:"
          echo "- KINDE_CLIENT_ID"
          echo "- KINDE_CLIENT_SECRET"
          echo "- DATABASE_URL"
          echo "- STRIPE_SECRET_KEY"
          echo "and others..."