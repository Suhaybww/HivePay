version: '3.8'

services:
  # Application services
  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - ./logs:/app/logs
    networks:
      - hivepay-network
    depends_on:
      - redis
      - postgres
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "node", "-e", "require('bull').checkHealth()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
  
  # Queue worker service
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "bootstrap.js"]
    env_file: .env
    volumes:
      - ./logs:/app/logs
    networks:
      - hivepay-network
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 2
      restart_policy:
        condition: any
        delay: 5s
        window: 60s
    healthcheck:
      test: ["CMD", "node", "-e", "require('./src/lib/queue/healthcheck.js')"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 30s

  # Secondary worker for redundancy
  queue-worker-backup:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["node", "bootstrap.js"]
    env_file: .env
    volumes:
      - ./logs:/app/logs
    networks:
      - hivepay-network
    depends_on:
      - redis
      - postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        window: 120s
    healthcheck:
      test: ["CMD", "node", "-e", "require('./src/lib/queue/healthcheck.js')"]
      interval: 90s
      timeout: 20s
      retries: 3
      start_period: 45s

  # Queue monitoring service
  queue-monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    command: ["node", "queueMonitor.js"]
    env_file: .env
    volumes:
      - ./logs:/app/logs
    networks:
      - hivepay-network
    depends_on:
      - redis
    deploy:
      restart_policy:
        condition: any
        delay: 10s
        window: 60s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 60s
      timeout: 5s
      retries: 3

  # Redis with persistence
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --appendfsync everysec --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis-data:/data
    networks:
      - hivepay-network
    ports:
      - "6379:6379"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - hivepay-network
    ports:
      - "5432:5432"
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - hivepay-network
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - hivepay-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: always

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs:/var/log/nginx
    networks:
      - hivepay-network
    ports:
      - "80:80"
    depends_on:
      - app
      - queue-monitor
    restart: always

networks:
  hivepay-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data: